<?php
/**
 * @file
 * TODO: Enter file description here.
 */

/**
 * Implements hook_help().
 */
function drupal_form_submit_code_help($path, $arg) {
  /* INFO:
   * The help hook is for displaying helpful messages at the top of pages indicated
   * by $section to further explain how they work. Adding certain "keywords" to the end of 
   * a given path (like admin/modules#description) will cause this text to display elsewhere
   * in the page as well (in this case, in the description section for the given module).
   */
  switch ($path) {
    case 'admin/help#drupal_form_submit_code':
      return t("TODO: Create admin help text.");
    // OPTIONAL: Add additional cases for other paths that should display help text.
  }
}


/**
 * Implements hook_menu().
 */
function drupal_form_submit_code_form_alter(&$form, &$form_state, $form_id) { 
//	dsm(array_keys($form));

	add_validate($form);
//dsm($form);
//dsm($form_state);
	$form['dfsc'] = array(
		'#type' => 'checkbox',
		'#title' => t('Print drupal_form_submit code'),
	);

}

function print_drupal_form_submit_code($form, $form_state){

	if($form['dfsc']['#value']){
		dsm($form_state);		
		
		//Remove unnecessary value generated by this module
		unset($form_state['values']['dfsc']);

		$id = $form['#form_id'];
		$state['values'] = $form_state['values'];

		$state = str_replace("=> 0,", "=> NULL,", var_export($state, TRUE));
		
		
		//get module_load_include info
		$load_include = get_load_include($form_state['build_info']['files']['menu']);
		
		//get extra argument required by drupal_form_submit
		$args = array();
		if (count($form_state['build_info']['args'])){
			$args = get_form_submit_args($form_state['build_info']['args']);
		}


		$output = $id.'(): '.$form_state['build_info']['files']['menu']."\n\n";
		$output .= $load_include."\n";
		$output .= '$form_id = \''.$id.'\';'."\n";
		$output .= '$form_state = '.$state.';'."\n";

		$form_args = '$form_id, $form_state';
		if (count($args)) {
			foreach ($args as $key=>$arg){
				$output .= "\n".$arg."\n";
			}
			
			$form_args .= ', '.implode(', ', array_keys($args));
		}
		
		
		$output .= 'drupal_form_submit ('.$form_args.');';
		
		
		dsm($output);

	}

	
}


function add_validate(&$array) {

	if (is_array($array)){
		foreach ($array as $key => $element){
			if ($key && $key == '#submit' && count($array['#submit'])){
				$array['#validate'][]='print_drupal_form_submit_code';
			}
			elseif (is_array($element)){
				add_validate($array[$key]);
			}

		}
		
	} else return;
	
	return;

	
}


function get_load_include($filepath){

	//inclide file is always the lastest element of the path
	$incfile=explode('.',end(explode('/', $filepath)));
		
	//file type is the last element of a filename
	$file_type = end($incfile);
	//exclude the type in file name
	array_pop($incfile);
	$incfile = implode('.',$incfile);
		
	//Find which module it belongs to
	foreach (explode('/', $filepath) as $name){
		if (drupal_get_path('module', $name)) $module_name = $name;
	}
	
	//take care of inc file in subdirectory
		
	$build_info=explode('/', $filepath);
	array_pop($build_info);
	
	$start = 0; $subdir=array();
	while (list($key, $val) = each($build_info)) {
		if ($start) $subdir[]=$val;
	    if ($val == $module_name) $start = 1;
	}
	
	//append to $incfile if inc file is in subdirectory
	if (count($subdir)) $incfile = implode("/", $subdir)."/".$incfile;
	
	
	return 'module_load_include("'.$file_type.'", "'.$module_name.'", "'.$incfile.'");';
	
}

function get_form_submit_args($args){
	foreach($args as $key => $arg){
		$output['$arg'.$key] = '$arg'.$key.' = '.str_replace("stdClass::__set_state", "(object)", var_export($arg, TRUE)).";";
	}
	
	return $output;
}